name: Previsao
inputs:
- {name: feat, type: String}
- {name: label, type: String}
- {name: model}
- {name: valor, type: Float}
outputs:
- {name: Output, type: Float}
implementation:
  container:
    image: tensorflow/tensorflow:1.11.0-py3
    command:
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - "def previsao(feat, label, model_path, valor):\n\n    import pandas as pd\n\
      \    import pickle\n\n    future = pd.DataFrame({feat:[valor]})\n    with open(model_path,\
      \ 'rb') as f:\n        trained_model = pickle.load(f)\n\n    # Retorna a previs\xE3\
      o do valor futuro do d\xF3lar quando a bolsa atinge ${valor} pontos\n\n    return\
      \ trained_model.predict(future)[0]\n\ndef _serialize_float(float_value: float)\
      \ -> str:\n    if isinstance(float_value, str):\n        return float_value\n\
      \    if not isinstance(float_value, (float, int)):\n        raise TypeError('Value\
      \ \"{}\" has type \"{}\" instead of float.'.format(\n            str(float_value),\
      \ str(type(float_value))))\n    return str(float_value)\n\nimport argparse\n\
      _parser = argparse.ArgumentParser(prog='Previsao', description='')\n_parser.add_argument(\"\
      --feat\", dest=\"feat\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--label\", dest=\"label\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--model\", dest=\"model_path\", type=str, required=True,\
      \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--valor\", dest=\"valor\"\
      , type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
      ----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args\
      \ = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\"\
      , [])\n\n_outputs = previsao(**_parsed_args)\n\n_outputs = [_outputs]\n\n_output_serializers\
      \ = [\n    _serialize_float,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n\
      \    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n\
      \        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
    args:
    - --feat
    - {inputValue: feat}
    - --label
    - {inputValue: label}
    - --model
    - {inputPath: model}
    - --valor
    - {inputValue: valor}
    - '----output-paths'
    - {outputPath: Output}
